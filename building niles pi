** Please note:  This document is under development and may change daily.  **

The best way to implement an Alexa controller for a Niles GXR-2 is to use an Amazon 
skill to communicate with a raspberry pi via an MQTT broker.  A lambda function 
that is triggered by the skill publishes update messages to a topic on the broker 
and the raspberry pi subscribes to the topic and acts on the update messages.
Traffic would be one way and could be QoS 0 (up to one message) because message
loss would be immediately recognized by the user as a command failure.  The 
result would be that the user would merely repeat the command.

The build process would be as follows:

Obtain the contents of this repository from github
Create an Alexa skill (this is done on the skills console)
Create a new lambda function that publishes to the AWS MQTT broker (this is done on the Amazon Web Services console)
Paste the skill ID into the configuration for the lambda function
Copy the boilerplate javascript code to the lambda function and customize it
Alter the endpoint on the Alexa skill to point to the Amazon Resource Name (ARN) for the new lambda function
Alter the lambda profile to allow MQTT traffic 
Test your code with the AWS IoT test console on the IoT server
Register the raspberry pi as a device on AWS IoT and download the connection kit
Install and customize code on the raspberry pi that subscribes to the AWS MQTT broker
Use the alexa app or web site to install your skill
Test the skill with voice commands to Alexa 

Let's look at each step in detail:

1. Obtain the contents of this repository from github

There are several ways to accomplish this task.  One way is described here.

a.  Open a web browser on your local computer.
b.  Navigate to https://github.com/jrrussell750/Alexa-Pi-IoT-for-Niles-GXR-2
c.  Click on the green "Code" button and select Download ZIP from the menu that displays. Github will 
download a zip file containing the all of the files from the repository.
d.  Extract the zip file to a folder on your local computer.

2.  Create an Alexa skill

There are several sub-steps to this step, and you need several things to make this work:

An amazon.com account
At least one echo device, or a cell phone with the amazon alexa app installed.
Internet access
A device that is powerfull enough to interact with amazon consoles (Raspberry pi 3b or above with raspian.)

a.  Log into the Alexa Skills Kit Developers Console (https://developer.amazon.com/alexa/console/ask).  You will be presented 
with the skills menu page.
b.  Click on the "Create Skill".  The "Create New Skill" page will display.
c.  Enter a name for your skill and verify that "Custom Model" is selected as the model to add to your skill.  Click 
on the "Create Skill" button.  Alexa will create your skill.
d.  Navigate to the JSON editor under Interaction Model in the left menu pane of the console.  Delete the default JSON code
in the editor.  
e.  Using a text editor, open the gxr2.json file that was previously downloaded from this repository.  Copy the contents of 
the file and paste it into the JSON editor.
f.  Press the Save button on the json editor to save the code.  
g.  Go back to the skills menu page.  Your skill should be listed,
h.  Click on the "Copy Skill ID" link under your skill name in the list.  Your Skill ID will be copied to the clipboard.
i.  Open a text editor on your local machine and paste the Skill ID into it.
j.  Save the Skill ID file using a name you can remember (something like skillid.txt would work).

3.  Create a new lambda function that publishes to the AWS MQTT broker

Successful completion of Step 2 is necessary to complete this step.  Also, you will need to create a separate account
on an Alexa Web Services server.  This is a separate service from the Alexa Skills Kit, and it is a good idea
to bookmark or save the URLs for both consoles, as they are difficult to locate if you don't know where to look. The URL
for the AWS console is dependent on the region that you are in.  For example, if you are on the West Coast, your
region would probably be "us-west-2" and the URL for your console would be as follows:

"https://us-west-2.console.aws.amazon.com/console/home?region=us-west-2"

If you're not sure, you can go to "https://console.aws.amazon.com/" to get the URL for your region.

Please note:  You are going to require a separate account for this server, and your log in includes a Captcha dialog with 
letters and numbers that are sometimes difficult to interpret.  This server also has a nasty habit of logging you out, even 
when you leave the Web page for only a few minutes.  If you are logged out, you'll want to close your browser, then reopen 
it before logging in. 

The following are the steps to create the lambda function:

a.  Log into the Amazon Web Services console (https://console.aws.amazon.com/)
b.  Type "lambda" in the search text box and press Enter.  Select lambda from the list of services that display.
    The lambda function page will display.
c.  Click on the "Create Function" button. The create function page will display.
d.  Enter a name for the function and click on the "create function" button at the bottom right hand corner of the page.  
    The function will be created.

4. Add a trigger for the lambda function and paste the skill ID into it.

The skill ID was copied in step 2h and saved to a file.  To complete this step you need to create a trigger and 
then paste the ID into the skill ID text box using these procedures:

a.  From the functions page of the AWS lambda control panel, click on the function that you created.  The page for the function 
    will display.
b.  Click on the "add trigger" button.  The "Add Trigger" page will display.
c.  Click on the down arrow to the right of the "Select a Trigger" text box.  A list of triggers will display.
d.  Click on the "Alexa Skills Kit" trigger to select it. The "Trigger configuration" page will display.
e.  Paste the "Skill ID" into the "Skill ID" text box and then click on the "Add" button.  The "Function overview" page displays 
    and a confirmation message will display,

5.  Copy the boilerplate javascript code from AlexaSkill.js and index.js to the lambda function and customize it.

a.  Navigate to the code source screen for the gxr2 lambda function.
b.  Right-click in the left-hand pane and select "New File" from the menu that displays.
c.  Enter a name for the file (AlexaSkill.js will work).
d.  Open index.js on your local computer and copy its contents.  
e.  Delete any code in the index.js file on the AWS Console and paste the code from your local computer into that file.
f.  Open AlexaSkill.js on your local computer and copy its contents.
g.  Paste the code into the newly created file on the AWS Console.
h.  Click the "Deploy" button at the top of the Code source page.  This will save your code.

6.  Alter the endpoint on the Alexa skill to point to the Amazon Resource Name (ARN) for the new lambda function

This creates a connection between the Alexa skill and the lambda function.  When the skill receives a voice command, it will pass parameters to 
the lambda function using the endpoint.  

a.  Click on the Copy ARN button on the top right of the lambda function screen.  This will copy the ARN to the clipboard on your local computer.
b.  Switch to the Alexa developers console for your skill and then click on the endpoints link in the left-hand pane of the console.
c.  Verify that the AWS Lambda ARN radio button is selected. 
d.  Paste the ARN into the default region text box to the right of the radio buttton.

7,  Alter the lambda profile to allow MQTT traffic 

This provides permissions for the lambda function to publish messages on the AWS MQTT broker

8.  Test your code with the AWS IoT test console on the IoT server


9.  Register the raspberry pi as a device on AWS IoT and download the connection kit

This provides credentials that the raspberry pi will use to subscribe to topics on the AWS MQTT broker 

10. Install and customize code on the raspberry pi that subscribes to the AWS MQTT broker

Copy credentials to datatransfer.py and customize GXR2 zone and device names to match your installation 


11. Use the alexa app or web site to install your skill


This can be done from the alexa app on your iPhone.

12. Test the skill with voice commands to Alexa 
